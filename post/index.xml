<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Juha.TL</title>
    <link>https://juha.tl/post/</link>
    <description>Recent content in Posts on Juha.TL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Oct 2021 13:00:00 +0200</lastBuildDate><atom:link href="https://juha.tl/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Static types on BEAM: Gleam</title>
      <link>https://juha.tl/post/static-types-on-beam-gleam/</link>
      <pubDate>Thu, 14 Oct 2021 13:00:00 +0200</pubDate>
      
      <guid>https://juha.tl/post/static-types-on-beam-gleam/</guid>
      <description>While Elixir is a strongly typed language, the most common complaint I&amp;rsquo;ve encountered regarding Elixir is the lack of static typing. The Elixir core team has investigated the feasibility of introducing a backwards-compatible way of introducing a static type system in the past, but ultimately concluded that Elixir won&amp;rsquo;t be getting one (at least not via official means).
Thankfully, Elixir provides many tools for addressing typical type-related issues. The strong typing means implicit type casting is out of the picture, and you can avoid many other pitfalls of dynamic typing with a thorough use of guards, type specs and pattern matching.</description>
    </item>
    
    <item>
      <title>Elixir: A Stable Foundation</title>
      <link>https://juha.tl/post/elixir-a-stable-foundation/</link>
      <pubDate>Fri, 04 Jun 2021 13:00:00 +0200</pubDate>
      
      <guid>https://juha.tl/post/elixir-a-stable-foundation/</guid>
      <description>What I like most about Elixir is how it offers developers a very stable foundation to build upon, both in terms of technological stability (thanks to BEAM) and in terms of churn. With the release of Elixir 1.9 back in 2019, José Valim noted that Elixir was more or less “done” in terms of major features, and that the focus going forward would be on developer experience, ergonomics and other quality-of-life matters.</description>
    </item>
    
    <item>
      <title>Real-time multi-user canvas with Elixir and Phoenix</title>
      <link>https://juha.tl/post/real-time-multi-user-canvas-with-elixir-and-phoenix/</link>
      <pubDate>Tue, 10 Nov 2020 20:03:39 +0200</pubDate>
      
      <guid>https://juha.tl/post/real-time-multi-user-canvas-with-elixir-and-phoenix/</guid>
      <description>Note: The demo I discuss below was built in 2017, so certain examples do not reflect best practices today. It&amp;rsquo;s still a fun little interactive example of Elixir though, so I wanted to write some thoughts about it regardless.
Three years ago I wanted to experiment with the soft real-time capabilities of Elixir and Phoenix. I wanted to build a fun demo that could be easily shared with my friends and co-workers, and which would also illustrate the real-time aspect well.</description>
    </item>
    
    <item>
      <title>New personal site with Hugo</title>
      <link>https://juha.tl/post/new-personal-site-with-hugo/</link>
      <pubDate>Fri, 30 Oct 2020 20:03:39 +0200</pubDate>
      
      <guid>https://juha.tl/post/new-personal-site-with-hugo/</guid>
      <description>My previous personal site was built with Elixir and Phoenix. While I love the BEAM ecosystem, it didn&amp;rsquo;t really make much sense to host a completely static website on top of Phoenix (and pay for the associated server costs). I&amp;rsquo;m still very actively working with Phoenix, but for my personal little corner of the web, I wanted to go with something simpler.
Static site generation After some quick contemplation, I picked Hugo.</description>
    </item>
    
  </channel>
</rss>
